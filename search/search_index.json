{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"R Epi Analytics Template","text":"<p>Docker, Trivy, and R Shiny offer a powerful tech stack for developing, containerizing, securing, and deploying web applications. With straightforward installation and deployment processes, even users with no prior experience can leverage these tools for robust application development and deployment.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Application Requirements</li> <li>How to Run the Application</li> <li>Making changes to the app.R file</li> <li>Tech Stack Overview</li> </ul>"},{"location":"#important-links","title":"Important Links:","text":"<ul> <li>How to use</li> <li>Adding additional pages to the website</li> <li>Adoptation template</li> </ul>"},{"location":"#application-requirements","title":"Application Requirements","text":"<p>Before running the R Shiny application and using Docker and Trivy, you'll need to install the necessary software and dependencies. Below are the installation instructions for each application: - R Shiny:    - Download R from the R Project website   - Get RStudio Desktop from the RStudio website</p> <ul> <li>Docker: </li> <li> <p>Install Docker Desktop from the Docker website</p> </li> <li> <p>Trivy:</p> </li> <li>Installation instructions are available on the Trivy GitHub page</li> </ul>"},{"location":"#how-to-run-the-application","title":"How to Run the Application","text":"<p>Once you have installed R, Docker, and Trivy, you can run the R Shiny application using Docker:</p> <ul> <li>Navigate to the Application Directory (src/app): Open a terminal or command prompt and go to src/App. <pre><code>cd app/\n</code></pre></li> </ul> <p>Run this command in the terminal Build and Run Docker Containers:</p> <p><pre><code>docker compose up\n</code></pre> This starts the Docker containers and deploys the R Shiny application.</p> <p>For a more detailed explination on How to Run the Application, click here </p>"},{"location":"#making-changes-to-the-appr-file","title":"Making changes to the app.R file","text":"<p>When making changes to the app.R file, you'll need to run the following command to see the updates live on the application hosted at localhost:3838 <pre><code>docker compose down &amp;&amp; docker compose up\n</code></pre></p>"},{"location":"#by-running-docker-compose-down-docker-compose-up-you-ensure-that-your-docker-containers-are-properly-stopped-any-changes-to-your-code-are-applied-and-then-the-containers-are-restarted-with-the-updated-code-this-approach-helps-you-see-the-changes-in-your-application-without-needing-to-manually-stop-and-start-the-containers","title":"By running docker compose down &amp;&amp; docker compose up, you ensure that your Docker containers are properly stopped, any changes to your code are applied, and then the containers are restarted with the updated code. This approach helps you see the changes in your application without needing to manually stop and start the containers.","text":"<p>For a more detailed explination on How to Run the Application, click here </p>"},{"location":"#access-the-application","title":"Access the Application:","text":"<p>After the containers start, access the R Shiny application by opening a web browser and going to http://localhost:3838.</p>"},{"location":"#techstack-overview","title":"Techstack Overview","text":""},{"location":"#docker","title":"Docker","text":"<p>Docker is a containerization platform that simplifies the deployment and management of applications by packaging them into lightweight, portable containers. Installation is straightforward on Windows, Linux, and macOS, enabling developers to quickly adopt Docker across various operating systems.</p> <p>For more on Docker, click here</p>"},{"location":"#trivy","title":"Trivy","text":"<p>Trivy is a container vulnerability scanner that identifies security risks in container images and filesystems, helping organizations proactively secure their containerized applications. Installation is straightforward on Windows, Linux, and macOS, ensuring ease of adoption across various operating systems. For more on Trivy, click here</p>"},{"location":"#r","title":"R","text":"<p>R is a programming language and software environment for statistical computing and graphics. R Shiny is an open-source web application framework for R, allowing users to create interactive web applications directly from R code. Installation is straightforward on Windows, Linux, and macOS, enabling users to leverage the power of R and R Shiny for data analysis and application development. For more on R, click here</p>"},{"location":"#mkdocs","title":"Mkdocs","text":"<p>MkDocs is a static site generator that simplifies the creation of documentation websites from markdown files. Its easy-to-use interface and powerful features make it an excellent choice for developers and technical writers. For more on Mkdocs, click here</p>"},{"location":"Trivy_ignored_files/","title":"List of ignored files","text":""},{"location":"Trivy_ignored_files/#updated-april-16th-2024","title":"Updated: April 16th, 2024","text":"<p>The decision to ignore CVE-2024-26597 in the vulnerability scan is primarily influenced by the dependency on the <code>rocker/r-ver</code> base image. The vulnerability is related to the Linux kernel and is likely to be resolved through an update of the <code>rocker/r-ver</code> image to a version that addresses CVE-2024-26597. Until such an update is made available and incorporated into the project's Dockerfile, the vulnerability remains unresolved. Therefore, ignoring CVE-2024-26597 temporarily allows the development team to prioritize updating the <code>rocker/r-ver</code> base image to a version that mitigates the vulnerability. Once the base image is updated, the ignore directive can be removed, ensuring a more comprehensive approach to addressing security vulnerabilities within the application environment. Regular maintenance and updates of base images are essential practices to maintain the security posture of containerized applications.</p>"},{"location":"how_to/How-to-adopt-template/","title":"Legacy Project Migration Guide: Adopting Docker, Trivy, and R Shiny Structure","text":"<p>Welcome to the migration guide for bringing your legacy project into the structured environment of Docker, Trivy, and R Shiny. This guide will walk you through the steps necessary to integrate your existing project into this new environment, ensuring ease of deployment, security scanning, and running your application with R Shiny.</p>"},{"location":"how_to/How-to-adopt-template/#overview","title":"Overview","text":"<p>This migration aims to modernize your project by introducing Docker for containerization and Trivy for security scanning. By adopting this structure, you'll benefit from improved deployment consistency and enhanced security.</p>"},{"location":"how_to/How-to-adopt-template/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the migration, ensure that you have the following prerequisites:</p> <ul> <li>Basic knowledge of Docker, Docker Compose, and Trivy.</li> <li>Familiarity with R Shiny applications.</li> <li>Read the How-To-Use documentation.</li> <li>Downloaded the required applications from the ReadMe file.</li> </ul>"},{"location":"how_to/How-to-adopt-template/#migration-steps","title":"Migration Steps","text":""},{"location":"how_to/How-to-adopt-template/#step-1-project-structure-adjustment","title":"Step 1 : Project Structure Adjustment","text":"<p>Ensure your project structure aligns with the expected structure for Docker, Trivy, and R Shiny:</p> <ul> <li> <p>app.R: This file will contain your R Shiny application code. Place your existing product code within this file.</p> </li> <li> <p>install_dependancies.R: This file should list all the dependencies required for your application to run. Fill out this file with the necessary R packages and any system-level dependencies.</p> </li> </ul> <p>Ensure that <code>app.R</code> and <code>install_dependancies.R</code> are properly filled out before proceeding to the next step.</p>"},{"location":"how_to/How-to-adopt-template/#step-2-docker-compose","title":"Step 2 : Docker Compose","text":"<p>Run the following command to build the image and run the app.R file on localhost:3838:</p> <pre><code>docker compose up -d\n</code></pre> <p>Ensure everything is correct before pushing the project to GitHub.</p>"},{"location":"how_to/How-to-adopt-template/#step-3-push-to-github","title":"Step 3 : Push to GitHub","text":"<p>Once you are satisfied with your local setup, push the project to GitHub. This will trigger the workflow to build your Docker image and run Trivy scans. If any high or critical vulnerabilities are found, the workflow will fail, preventing the changes from being pushed to GitHub until the issues are addressed.</p> <p>Trivy will automatically run a scan on the image once it is pushed to GitHub.</p>"},{"location":"how_to/How-to-run-trivy-locally/","title":"How to Run Trivy with Act","text":""},{"location":"how_to/How-to-run-trivy-locally/#installing-act","title":"Installing Act","text":"<p>Act is a command-line tool that allows you to run GitHub Actions locally. This can be useful for testing your GitHub Actions workflows before pushing changes to GitHub. Here's how to install Act:</p>"},{"location":"how_to/How-to-run-trivy-locally/#using-homebrew-macos","title":"Using Homebrew (macOS)","text":"<p>If you're on macOS and have Homebrew installed, you can install Act using the following command: <pre><code>brew install act\n</code></pre></p>"},{"location":"how_to/How-to-run-trivy-locally/#using-chocolatey-windows","title":"Using Chocolatey (Windows)","text":"<p>If you're on Windows and have Chocolatey installed, you can install Act using the following command: <pre><code>choco install act-cli\n</code></pre></p>"},{"location":"how_to/How-to-run-trivy-locally/#using-go-cross-platform","title":"Using Go (Cross-platform)","text":"<p>Alternatively, you can install Act using Go: <pre><code>go install github.com/nektos/act@latest\n</code></pre></p>"},{"location":"how_to/How-to-run-trivy-locally/#what-act-does","title":"What Act Does","text":"<p>Act allows you to run GitHub Actions workflows locally, simulating the execution environment and providing feedback on how your workflows will behave in a GitHub Actions environment. This can help you catch potential issues and debug your workflows before pushing changes to GitHub.</p>"},{"location":"how_to/How-to-run-trivy-locally/#running-trivy-with-act","title":"Running Trivy with Act","text":"<p>Assuming you have a GitHub Actions workflow that includes a Trivy scan step, you can use Act to run the Trivy scan locally. Here's how:</p> <ol> <li> <p>Navigate to the directory containing your GitHub Actions workflow files.</p> </li> <li> <p>Open a terminal window.</p> </li> <li> <p>From the root directory of your project, run the following command to execute the GitHub Actions workflow locally:</p> </li> </ol> <pre><code>act \n</code></pre> <ol> <li> <p>Act will output the progress of the job, including any log messages or errors encountered during execution.</p> </li> <li> <p>Once the job completes, you can review the output to identify any vulnerabilities detected by Trivy.</p> </li> </ol> <p>By using Act to run the Trivy scan locally, you can verify the behavior of your Trivy scan job and ensure that it functions as expected before pushing changes to GitHub.</p> <p>For items where there is currently no solution, see the .trivyignore file. It contains an explanation of why the vulnerability has been ignored and the date when it was last updated. It is advised to review these items periodically to check if the vulnerabilities have been addressed.</p>"},{"location":"how_to/How-to-update-pages/","title":"Adding Additional Pages to GitHub Pages","text":""},{"location":"how_to/How-to-update-pages/#tldr","title":"TLDR","text":"<p>This guide simplifies the process of adding pages to a GitHub site using MkDocs, providing clear steps for newcomers to easily expand their documentation site.</p> <p>To run locally, use the command: </p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"how_to/How-to-update-pages/#getting-started","title":"Getting Started","text":"<p>Before you begin, ensure you have the following installed:  <pre><code>pip install mkdocs mkdocstrings\n</code></pre> For a more detailed explinAtion, see the MkDocs documentation</p>"},{"location":"how_to/How-to-update-pages/#step-1-open-mkdocsyml","title":"Step 1: Open <code>mkdocs.yml</code>","text":"<p>First, locate and open the <code>mkdocs.yml</code> file in your MkDocs project directory. This file contains the configuration settings for your documentation site.</p>"},{"location":"how_to/How-to-update-pages/#step-2-navigate-to-the-nav-section","title":"Step 2: Navigate to the <code>nav</code> Section","text":"<p>In the <code>mkdocs.yml</code> file, find the <code>nav</code> section. This section defines the navigation structure of your documentation site.</p>"},{"location":"how_to/How-to-update-pages/#step-3-add-a-new-page","title":"Step 3: Add a New Page","text":"<p>To add a new page, specify its title and the filename of the associated Markdown file. Follow this format:</p>"},{"location":"how_to/How-to-update-pages/#example","title":"Example:","text":"<p><pre><code>nav:\n  - Home: index.md\n  - About: about.md     # Add a new page titled \"About\" linked to about.md\n  - Contact: contact.md # Add another page titled \"Contact\" linked to contact.md\n</code></pre> Replace \"About\" and \"Contact\" with your desired page titles, and about.md and contact.md with the filenames of your Markdown files.</p>"},{"location":"how_to/How-to-update-pages/#step-4-save-changes","title":"Step 4: Save Changes","text":"<p>Once you've added the new pages to the nav section, save the mkdocs.yml file.</p>"},{"location":"how_to/How-to-update-pages/#step-5-create-markdown-files","title":"Step 5: Create Markdown Files","text":"<p>Create Markdown files for the newly added pages. For example, create about.md and contact.md in the docs/ directory of your project.</p>"},{"location":"how_to/How-to-update-pages/#step-6-edit-new-pages","title":"Step 6: Edit New Pages","text":"<p>Edit the content of the new Markdown files to add your desired content for the \"About\" and \"Contact\" pages.</p>"},{"location":"how_to/How-to-update-pages/#step-7-run-mkdocs","title":"Step 7: Run MkDocs","text":"<p>After adding and editing the necessary files, run MkDocs to see the changes:</p> <pre><code>mkdocs serve\n</code></pre> <p>This command starts a local server where you can preview your documentation site, including the new pages you've added.</p>"},{"location":"how_to/How-to-use/","title":"Modifying app.R and install_dependencies.R for Docker Deployment","text":"<p>This documentation outlines the steps to modify the <code>app.R</code> and <code>install_dependencies.R</code> files in an R Shiny application and how to ensure that Docker reflects these changes.</p>"},{"location":"how_to/How-to-use/#tldr","title":"TLDR","text":"<p>Modifying the <code>app.R</code> and <code>install_dependencies.R</code> files allows you to customize the behavior and appearance of your R Shiny application. By following the steps outlined in this documentation, you can make changes to these files and ensure that Docker reflects these modifications when running the containerized application.</p>"},{"location":"how_to/How-to-use/#getting-started-modifying-appr","title":"Getting Started - Modifying app.R","text":"<p>The <code>app.R</code> file typically contains the main code for your R Shiny application. You can make changes to this file to update the UI layout, add new visualizations, or modify the server logic.</p>"},{"location":"how_to/How-to-use/#steps-to-modify-appr","title":"Steps to Modify app.R:","text":""},{"location":"how_to/How-to-use/#step-1-open-appr","title":"Step 1 : Open app.R","text":"<p>Locate the <code>app.R</code> file in your project directory and open it in a text editor or an R development environment.</p>"},{"location":"how_to/How-to-use/#step-2-make-changes","title":"Step 2 : Make Changes","text":"<p>Modify the code according to your requirements. You can add new UI elements using Shiny functions like <code>sliderInput</code>, <code>selectInput</code>, <code>plotOutput</code>, etc. You can also update the server logic to handle new input elements or generate different outputs.</p> <ol> <li>Save Changes: Once you've made the necessary modifications, save the <code>app.R</code> file.</li> </ol>"},{"location":"how_to/How-to-use/#modifying-install_dependenciesr","title":"Modifying install_dependencies.R","text":"<p>The <code>install_dependencies.R</code> file contains the dependencies required by your R Shiny application. These dependencies may include R packages that are necessary for the application to function correctly.</p>"},{"location":"how_to/How-to-use/#steps-to-modify-install_dependenciesr","title":"Steps to Modify install_dependencies.R:","text":"<ol> <li> <p>Open install_dependencies.R: Locate the <code>install_dependencies.R</code> file in your project directory and open it in a text editor or an R development environment.</p> </li> <li> <p>Update Dependencies: Add, remove, or update the R package dependencies listed in the file. You can use the <code>install.packages</code> function to install new packages or update existing ones.</p> </li> <li> <p>Save Changes: Once you've updated the dependencies, save the <code>install_dependencies.R</code> file.</p> </li> </ol>"},{"location":"how_to/How-to-use/#dockerizing-changes","title":"Dockerizing Changes","text":"<p>After making modifications to the <code>app.R</code> and <code>install_dependencies.R</code> files, you'll need to ensure that Docker reflects these changes when running the containerized application.</p>"},{"location":"how_to/How-to-use/#steps-to-update-docker-configuration","title":"Steps to Update Docker Configuration:","text":"<ol> <li>Update Docker Compose: Navigate to the root directory of your project that contains the <code>docker-compose.yml</code> file. Run the following command to bring down existing containers and then bring them up again:</li> </ol> <pre><code>docker-compose down &amp;&amp; docker-compose up -d\n</code></pre> <p>This command will stop any running containers and then start them again with the updated configurations.</p> <ol> <li>View Changes: Access your R Shiny application through a web browser using the specified host port. You should see the modifications reflected in the application.</li> </ol>"},{"location":"how_to/How-website-works/","title":"How MkDocs and GitHub Actions Build a Website","text":""},{"location":"how_to/How-website-works/#tldr","title":"TLDR","text":"<p>MkDocs converts Markdown files into a static website, while GitHub Actions automates workflows. Together, they streamline the process of building and deploying documentation websites, ensuring they're always current and accessible.</p>"},{"location":"how_to/How-website-works/#mkdocs-overview","title":"MkDocs Overview","text":"<ul> <li>MkDocs is a static site generator that converts Markdown files into a static HTML website.</li> <li>It simplifies the process of creating and maintaining documentation websites by allowing you to write content in Markdown format.</li> <li>MkDocs uses a <code>mkdocs.yml</code> configuration file to define settings such as the site name, theme, navigation structure, and any plugins to use.</li> </ul>"},{"location":"how_to/How-website-works/#github-actions-overview","title":"GitHub Actions Overview","text":"<ul> <li>GitHub Actions is a feature of GitHub that allows you to automate workflows directly within your GitHub repository.</li> <li>Workflows are defined using YAML files stored in the <code>.github/workflows</code> directory of your repository.</li> <li>Workflows consist of one or more jobs, each containing a series of steps to be executed.</li> </ul>"},{"location":"how_to/How-website-works/#building-the-website-with-mkdocs","title":"Building the Website with MkDocs","text":"<ul> <li>To build a website using MkDocs, you typically start by creating a <code>mkdocs.yml</code> configuration file in your project directory.</li> <li>This file contains settings such as the site name, theme, navigation structure, and any plugins to use.</li> <li>You write your documentation content in Markdown files, organized into a directory structure.</li> <li>When you're ready to build your website, you run the <code>mkdocs build</code> command in your terminal.</li> <li>MkDocs reads the configuration file and Markdown files, processes them, and generates a static HTML website in a directory called <code>site</code> by default.</li> <li>This static website can then be hosted on any web server or platform that supports static content, such as GitHub Pages.</li> </ul>"},{"location":"how_to/How-website-works/#automating-deployment-with-github-actions","title":"Automating Deployment with GitHub Actions","text":"<ul> <li>GitHub Actions allows you to automate the process of building and deploying your MkDocs website using workflows.</li> <li>You create a workflow file (typically named <code>main.yml</code> or similar) in the <code>.github/workflows</code> directory of your repository.</li> <li>The workflow file defines when the workflow should run (e.g., on every push to a specific branch) and the series of steps to execute.</li> <li>Within the workflow, you specify steps to check out the repository code, set up any necessary dependencies (e.g., Python and MkDocs), build the MkDocs site, and deploy the built site.</li> <li>For deploying to GitHub Pages, you can use actions such as <code>peaceiris/actions-gh-pages</code>, which simplifies the process of deploying static content to GitHub Pages.</li> <li>The GitHub Actions workflow runs whenever the specified trigger conditions are met (e.g., on every push to the main branch).</li> <li>Once the workflow executes successfully, your MkDocs website is automatically built and deployed to GitHub Pages, making it accessible to your audience.</li> </ul> <p>By combining MkDocs with GitHub Actions, you can streamline the process of creating, updating, and deploying documentation websites, ensuring that your content is always up-to-date and easily accessible to your users.</p>"},{"location":"techstack/Docker/","title":"Docker: Containerization Platform","text":""},{"location":"techstack/Docker/#tldr","title":"TLDR","text":"<p>Docker is a containerization platform that simplifies the deployment and management of applications by packaging them into lightweight, portable containers. Installation is straightforward on Windows, Linux, and macOS, enabling developers to quickly adopt Docker across various operating systems.</p> <p>visit https://www.docker.com/ for more information</p>"},{"location":"techstack/Docker/#what-is-docker","title":"What is Docker:","text":"<p>Docker is a platform that enables developers to build, ship, and run applications as lightweight containers. Containers are isolated environments that package everything an application needs to run, including libraries, dependencies, and runtime, ensuring consistency across different environments.</p>"},{"location":"techstack/Docker/#how-docker-works","title":"How Docker Works:","text":"<p>Docker uses a client-server architecture, where the Docker Engine serves as the server and the Docker CLI (Command Line Interface) acts as the client. Developers use the Docker CLI to interact with the Docker Engine, issuing commands to build, manage, and deploy containers. Docker images, which contain the application code and dependencies, are built from Dockerfiles, which are simple text files that specify the configuration of the container environment.</p>"},{"location":"techstack/Docker/#why-docker-is-important","title":"Why Docker is Important:","text":"<p>Docker revolutionizes the way applications are developed, deployed, and managed by providing a standardized platform for containerization. It streamlines the development process, allowing developers to build and test applications in isolated environments. Docker's portability and scalability make it ideal for modern cloud-native architectures, enabling organizations to deploy applications quickly and efficiently, regardless of the underlying infrastructure.</p>"},{"location":"techstack/Docker/#installation-guide","title":"Installation Guide","text":""},{"location":"techstack/Docker/#windows","title":"Windows:","text":"<ol> <li>Download the Docker Desktop installer from the official Docker website.</li> <li>Double-click the downloaded installer to launch the installation process.</li> <li>Follow the on-screen instructions to complete the installation.</li> <li>Once installed, Docker Desktop will be accessible from the system tray.</li> </ol>"},{"location":"techstack/Docker/#linux","title":"Linux:","text":"<ol> <li>Install Docker via the package manager for your distribution. For example, on Debian/Ubuntu-based systems, run: <pre><code>sudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\n</code></pre></li> <li> <p>Start the Docker service by running: <pre><code>sudo systemctl start docker\n</code></pre></p> </li> <li> <p>Verify the installation by running <code>docker --version</code> in the terminal.</p> </li> </ol>"},{"location":"techstack/Docker/#macos","title":"macOS:","text":"<ol> <li>Download the Docker Desktop installer from the official Docker website.</li> <li>Double-click the downloaded installer to launch the installation process.</li> <li>Follow the on-screen instructions to complete the installation.</li> <li>Once installed, Docker Desktop will be accessible from the Applications folder.</li> </ol>"},{"location":"techstack/Mkdocs/","title":"MkDocs: Static Site Generator","text":""},{"location":"techstack/Mkdocs/#tldr","title":"TLDR","text":"<p>MkDocs is a static site generator that simplifies the creation of documentation websites from markdown files. Its easy-to-use interface and powerful features make it an excellent choice for developers and technical writers.</p> <p>visit https://www.mkdocs.org/ for more information</p>"},{"location":"techstack/Mkdocs/#what-is-mkdocs","title":"What is MkDocs:","text":"<p>MkDocs is a static site generator built with Python, designed to create documentation websites from markdown files. It provides a simple and straightforward way to organize and publish documentation, making it accessible to both technical and non-technical users.</p>"},{"location":"techstack/Mkdocs/#how-mkdocs-works","title":"How MkDocs Works:","text":"<p>MkDocs takes markdown files as input and converts them into a static HTML website. It uses a single configuration file (mkdocs.yml) to define the structure and appearance of the site. Users can customize the theme, navigation, and other settings to suit their needs.</p>"},{"location":"techstack/Mkdocs/#why-mkdocs-is-important","title":"Why MkDocs is Important:","text":"<p>MkDocs streamlines the documentation process, allowing developers and technical writers to focus on content creation rather than worrying about the technical details of website development. Its simplicity and flexibility make it an ideal choice for projects of all sizes.</p>"},{"location":"techstack/Mkdocs/#installation-guide","title":"Installation Guide","text":""},{"location":"techstack/Mkdocs/#prerequisites","title":"Prerequisites:","text":"<p>Ensure you have Python and pip installed on your system. You can install Python from the official Python website.</p>"},{"location":"techstack/Mkdocs/#installation","title":"Installation:","text":"<p>Install MkDocs and its dependencies using pip: <pre><code>pip install mkdocs mkdocstrings\n</code></pre></p>"},{"location":"techstack/Mkdocs/#getting-started","title":"Getting Started:","text":"<p>Once MkDocs is installed, navigate to your project directory and run: <pre><code>mkdocs serve\n</code></pre></p> <p>This command will start a local development server, allowing you to view your site in a web browser at http://localhost:8000/.</p>"},{"location":"techstack/Mkdocs/#what-next","title":"What Next:","text":"<p>After making changes to your MkDocs documentation and pushing them to your repository, GitHub Actions workflows will automatically trigger updates to your website pages. These workflows are configured to build and deploy your documentation site to GitHub Pages whenever changes are detected in the main branch of your repository.</p> <p>You can monitor the progress of the workflow runs in the \"Actions\" tab of your repository on GitHub. Once the workflows have successfully completed, your updated documentation site will be available online at the GitHub Pages URL associated with your repository.</p> <p>Remember to regularly review and update your documentation to ensure that it remains accurate and up-to-date with the latest changes in your project. This helps maintain the usability and reliability of your documentation for your users.</p>"},{"location":"techstack/R/","title":"R and R Shiny: Statistical Computing and Web Applications","text":""},{"location":"techstack/R/#tldr","title":"TLDR","text":"<p>R is a programming language and software environment for statistical computing and graphics. R Shiny is an open-source web application framework for R, allowing users to create interactive web applications directly from R code. Installation is straightforward on Windows, Linux, and macOS, enabling users to leverage the power of R and R Shiny for data analysis and application development.</p> <p>visit https://www.r-project.org/ for more information</p>"},{"location":"techstack/R/#what-is-r","title":"What is R:","text":"<p>R is a programming language and software environment specifically designed for statistical computing and graphics. It provides a wide variety of statistical and graphical techniques, making it an essential tool for data analysis, visualization, and modeling. With R, users can perform complex statistical computations, generate high-quality graphics, and develop custom functions and packages for specialized tasks.</p>"},{"location":"techstack/R/#how-to-install-r","title":"How to Install R:","text":""},{"location":"techstack/R/#windows","title":"Windows:","text":"<ol> <li>Download R from the R Project website.</li> <li>Run the downloaded installer and follow the installation instructions.</li> </ol>"},{"location":"techstack/R/#linux","title":"Linux:","text":"<ol> <li>Most Linux distributions have R available in their package repositories. You can install R using the package manager. For example, on Debian/Ubuntu-based systems, run: <pre><code>sudo apt-get update\nsudo apt-get install r-base\n</code></pre></li> </ol>"},{"location":"techstack/R/#macos","title":"macOS:","text":"<ol> <li>Download R from the R Project website.</li> <li>Run the downloaded installer and follow the installation instructions.</li> </ol>"},{"location":"techstack/R/#what-is-r-shiny","title":"What is R Shiny:","text":"<p>R Shiny is an open-source web application framework for R, allowing users to create interactive web applications directly from R code. It simplifies the process of building web applications by providing a flexible and powerful framework for incorporating R code into web interfaces. With R Shiny, users can create dynamic and responsive web applications for data visualization, analysis, and sharing.</p>"},{"location":"techstack/R/#how-to-install-r-shiny","title":"How to Install R Shiny:","text":"<ol> <li>Install R (if not already installed) following the instructions above.</li> <li>Install the shiny package in R by running the following command in the R console: <pre><code>install.packages(\"shiny\")\n</code></pre></li> <li>After installing the shiny package, you can start building R Shiny applications using R code.</li> </ol>"},{"location":"techstack/R/#why-r-and-r-shiny-are-important","title":"Why R and R Shiny are Important:","text":"<p>R and R Shiny play crucial roles in data analysis, visualization, and application development. R provides a rich set of statistical and graphical tools for exploring and analyzing data, while R Shiny extends the capabilities of R by enabling users to create interactive web applications. Together, R and R Shiny empower users to turn data into insights and share their findings with others through dynamic and engaging web interfaces.</p>"},{"location":"techstack/TechStackChoices/","title":"Selection of Docker and Trivy as Tech Stack","text":""},{"location":"techstack/TechStackChoices/#tldr","title":"TLDR","text":"<p>The selection of Docker as our containerization platform and Trivy as our container vulnerability scanner is driven by their robust features, reliability, and community support. By leveraging Docker and Trivy in our tech stack, we aim to streamline the development and deployment process while ensuring the security and integrity of our containerized applications.</p>"},{"location":"techstack/TechStackChoices/#introduction","title":"Introduction","text":"<p>In our project, we have carefully evaluated various technologies for containerization and container security. After thorough consideration, we have chosen Docker as our containerization platform and Trivy as our container vulnerability scanner. This document outlines the reasons behind our selection of Docker and Trivy as our tech stack.</p>"},{"location":"techstack/TechStackChoices/#docker","title":"Docker","text":""},{"location":"techstack/TechStackChoices/#reasons-for-choosing-docker","title":"Reasons for Choosing Docker:","text":"<ol> <li> <p>Standardization: Docker provides a standardized way to package, distribute, and run applications within containers. This standardization simplifies the development and deployment process, ensuring consistency across different environments.</p> </li> <li> <p>Portability: Docker containers are portable and can run on any machine that has Docker installed, regardless of the underlying operating system or infrastructure. This portability makes it easier to deploy applications across different environments, from development to production.</p> </li> <li> <p>Resource Efficiency: Docker containers share the host system's kernel, which makes them lightweight and resource-efficient compared to virtual machines. This efficiency allows for better utilization of hardware resources and scalability of applications.</p> </li> <li> <p>Ecosystem: Docker has a vibrant ecosystem with a wide range of tools, libraries, and community support. This ecosystem provides solutions for various aspects of the development and deployment lifecycle, including orchestration, monitoring, and security.</p> </li> </ol>"},{"location":"techstack/TechStackChoices/#trivy","title":"Trivy","text":""},{"location":"techstack/TechStackChoices/#reasons-for-choosing-trivy","title":"Reasons for Choosing Trivy:","text":"<ol> <li> <p>Comprehensive Vulnerability Database: Trivy leverages multiple vulnerability databases, including CVE, Red Hat, and Debian, to provide comprehensive coverage of security vulnerabilities. This extensive database ensures that our containerized applications are thoroughly scanned for vulnerabilities.</p> </li> <li> <p>Fast Scanning: Trivy is optimized for speed, allowing it to quickly scan container images and provide results in a matter of seconds. This fast scanning capability enables us to integrate security checks seamlessly into our development and deployment pipelines without causing significant overhead.</p> </li> <li> <p>Integration with CI/CD Pipelines: Trivy can be easily integrated into continuous integration and continuous delivery (CI/CD) pipelines to automate security scanning of container images during the development process. This integration ensures that security is considered from the early stages of development and is part of our DevSecOps practices.</p> </li> <li> <p>Simple Usage: Trivy can be run as a standalone tool or integrated into other container scanning workflows, making it easy to incorporate security checks into existing development workflows. Its simple command-line interface and flexible configuration options make it accessible to developers and security teams alike.</p> </li> </ol>"},{"location":"techstack/Trivy/","title":"Trivy: Vulnerability Scanner for Containers","text":""},{"location":"techstack/Trivy/#tldr","title":"TLDR","text":"<p>Trivy is a container vulnerability scanner that identifies security risks in container images and filesystems, helping organizations proactively secure their containerized applications. Installation is straightforward on Windows, Linux, and macOS, ensuring ease of adoption across various operating systems.</p> <p>visit https://trivy.dev/ for more information</p>"},{"location":"techstack/Trivy/#what-is-trivy","title":"What is Trivy:","text":"<p>Trivy is a comprehensive vulnerability scanner specifically designed for containers. It scans container images and filesystems for known vulnerabilities, helping users identify and mitigate potential security risks. For example, imagine you're building a web application using Docker containers. Trivy can analyze the contents of your containers and alert you if any security vulnerabilities are found, allowing you to address them before deploying your application.</p>"},{"location":"techstack/Trivy/#how-trivy-works","title":"How Trivy Works:","text":"<p>Trivy works by leveraging an extensive vulnerability database to scan container images and filesystems layer by layer. It compares the contents of each layer against a database of known vulnerabilities and exposures (CVEs). If any vulnerabilities are found, Trivy generates detailed reports highlighting the severity levels of the issues and providing recommended remediation steps. This allows users to take proactive measures to secure their containerized applications.</p>"},{"location":"techstack/Trivy/#why-trivy-is-important","title":"Why Trivy is Important:","text":"<p>Containerized environments offer flexibility and scalability, but they also introduce security challenges. Vulnerabilities within container images can lead to serious security breaches if left unaddressed. Trivy helps organizations mitigate these risks by proactively identifying vulnerabilities in containerized applications. By addressing these vulnerabilities before deployment, organizations can enhance the overall security posture of their containerized infrastructure and protect their data and assets from potential threats.</p>"},{"location":"techstack/Trivy/#installation-guide","title":"Installation Guide","text":""},{"location":"techstack/Trivy/#windows","title":"Windows:","text":"<ol> <li>Download the Trivy Windows executable from the official GitHub releases page.</li> <li>Extract the downloaded ZIP file to a directory of your choice.</li> <li>Add the directory containing the Trivy executable to your system's PATH environment variable.</li> <li>Verify the installation by running <code>trivy --version</code> in the command prompt.</li> </ol>"},{"location":"techstack/Trivy/#linux","title":"Linux:","text":"<ol> <li> <p>Install Trivy via the package manager for your distribution. For example, on Debian/Ubuntu-based systems, run: <pre><code>sudo apt-get update\nsudo apt-get install -y trivy\n</code></pre></p> </li> <li> <p>Alternatively, download the Trivy Linux executable from the official GitHub releases page.</p> </li> <li>Make the downloaded file executable and move it to a directory in your PATH.</li> <li>Verify the installation by running <code>trivy --version</code> in the terminal.</li> </ol>"},{"location":"techstack/Trivy/#macos","title":"macOS:","text":"<ol> <li> <p>Install Trivy via Homebrew by running the following command in the terminal: <pre><code>brew install aquasecurity/trivy/trivy\n</code></pre></p> </li> <li> <p>Alternatively, download the Trivy macOS executable from the official GitHub releases page.</p> </li> <li>Make the downloaded file executable and move it to a directory in your PATH.</li> <li>Verify the installation by running <code>trivy --version</code> in the terminal.</li> </ol>"}]}