{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"R Shiny, Docker, and Trivy","text":"<p>Docker, Trivy, and R Shiny offer a powerful tech stack for developing, containerizing, securing, and deploying web applications. With straightforward installation and deployment processes, even users with no prior experience can leverage these tools for robust application development and deployment.</p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>Application Requirements</li> <li>R </li> <li>Docker</li> <li>Trivy</li> <li>How to Run the Application</li> <li>Making changes to the app.R file</li> <li>Application Overview<ul> <li>What Is R Shiny</li> <li>What is Docker?</li> <li>What is Trivy?</li> </ul> </li> </ul>"},{"location":"#application-requirements","title":"Application Requirements","text":"<p>Before running the R Shiny application and using Docker and Trivy, you'll need to install the necessary software and dependencies. Below are the installation instructions for each application:</p>"},{"location":"#r","title":"R","text":"<ul> <li> <p>R: Download and install R from the R Project website.</p> </li> <li> <p>RStudio (Optional): Get RStudio Desktop from the RStudio website.</p> </li> <li> <p>Shiny Package: In R console, run:</p> </li> </ul> <pre><code>install.packages(\"shiny\")\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<ul> <li>Docker Desktop: Install Docker Desktop from the Docker website. </li> </ul>"},{"location":"#trivy","title":"Trivy","text":"<ul> <li> <p>Trivy: Installation instructions are available on the Trivy GitHub page</p> </li> <li> <p>On Linux, you can typically install Trivy using package managers like apt or yum.  In bash, run: <pre><code>sudo apt-get install -y wget apt-transport-https gnupg lsb-release\nwget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -\necho deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list\nsudo apt-get update -y\nsudo apt-get install -y trivy\n</code></pre> Check the Trivy GitHub page for the most up-to-date installation instructions.</p> </li> </ul>"},{"location":"#how-to-run-the-application","title":"How to Run the Application","text":"<p>Once you have installed R, Docker, and Trivy, you can run the R Shiny application using Docker:</p> <ul> <li>Navigate to the Application Directory (src/app): Open a terminal or command prompt and go to src/App. <pre><code>cd app/\n</code></pre></li> </ul> <p>Run this command in the terminal Build and Run Docker Containers:</p> <p><pre><code>docker compose up\n</code></pre> This starts the Docker containers and deploys the R Shiny application.</p>"},{"location":"#making-changes-to-the-appr-file","title":"Making changes to the app.R file","text":"<p>When making changes to the app.R file, you'll need to run the following command to see the updates live on the application hosted at localhost:3838 <pre><code>docker compose  down &amp;&amp; docker compose up\n</code></pre></p>"},{"location":"#by-running-docker-compose-down-docker-compose-up-you-ensure-that-your-docker-containers-are-properly-stopped-any-changes-to-your-code-are-applied-and-then-the-containers-are-restarted-with-the-updated-code-this-approach-helps-you-see-the-changes-in-your-application-without-needing-to-manually-stop-and-start-the-containers","title":"By running docker compose down &amp;&amp; docker compose up, you ensure that your Docker containers are properly stopped, any changes to your code are applied, and then the containers are restarted with the updated code. This approach helps you see the changes in your application without needing to manually stop and start the containers.","text":"<p>For more detailed instructions, visitthe How-To-Use file located in the </p>"},{"location":"#access-the-application","title":"Access the Application:","text":"<p>After the containers start, access the R Shiny application by opening a web browser and going to http://localhost:3838.</p>"},{"location":"#application-overview","title":"Application Overview","text":""},{"location":"#what-is-r-shiny","title":"What Is R Shiny","text":"<p>R Shiny is an open-source web application framework for R, primarily used for statistical computing and data analysis. Developed by RStudio, Shiny lets R users create interactive web applications directly from R code without needing to know HTML, CSS, or JavaScript.</p>"},{"location":"#key-features-of-r-shiny","title":"Key Features of R Shiny:","text":"<ul> <li> <p>Interactive Web Applications: Shiny turns analyses, visualizations, and models into interactive web applications for dynamic exploration.</p> </li> <li> <p>Reactive Programming: With reactive programming, developers define relationships between inputs and outputs for automatic updating based on input changes.</p> </li> <li> <p>Easy Deployment: Shiny applications deploy easily to various platforms, simplifying sharing and production use.</p> </li> <li> <p>Customization: Shiny offers high-level abstractions for web app creation with flexibility for customization using HTML, CSS, and JavaScript.</p> </li> </ul>"},{"location":"#how-r-shiny-works","title":"How R Shiny Works:","text":"<ul> <li> <p>UI Definition: Developers create the application's UI using predefined functions and components provided by the Shiny package.</p> </li> <li> <p>Server Logic: R code defines the server logic, reacting to user inputs and generating outputs.</p> </li> <li> <p>Reactivity: Shiny automatically manages reactivity, updating outputs based on input changes without manual coding.</p> </li> <li> <p>Deployment: Applications deploy to servers or hosting platforms using tools like RStudio Connect or Shiny Server, accessible via web browsers.</p> </li> </ul>"},{"location":"#what-is-docker","title":"What is Docker","text":"<p>Docker is a platform for building, shipping, and running applications within containers, ensuring consistency across different environments.</p>"},{"location":"#key-features-of-docker","title":"Key Features of Docker:","text":"<ul> <li> <p>Containerization: Docker packages applications with dependencies into containers, isolating them from the environment.</p> </li> <li> <p>Portability: Docker containers run on any machine with Docker installed, regardless of the operating system.</p> </li> <li> <p>Resource Efficiency: Containers share the host system's kernel, making them lightweight and resource-efficient.</p> </li> <li> <p>Microservices Architecture: Docker supports microservices architecture by enabling decomposed, independently deployable containers.</p> </li> </ul>"},{"location":"#what-is-trivy","title":"What is Trivy","text":"<p>Trivy is a vulnerability scanner for containers and other artifacts, providing comprehensive security coverage.</p>"},{"location":"#key-features-of-trivy","title":"Key Features of Trivy:","text":"<ul> <li> <p>Comprehensive Vulnerability Database: Trivy leverages multiple vulnerability databases for thorough security scanning.</p> </li> <li> <p>Fast Scanning: Trivy quickly scans container images, providing results in seconds.</p> </li> <li> <p>Integration with CI/CD Pipelines: Trivy seamlessly integrates into CI/CD pipelines, automating security scanning during development.</p> </li> <li> <p>Simple Usage: Trivy is user-friendly, run as a standalone tool or integrated into container scanning workflows.</p> </li> <li> <p>How Trivy Works: Trivy scans container images for vulnerabilities by analyzing package manifests against known security issues.</p> </li> <li> <p>It identifies vulnerable packages and provides detailed information about each vulnerability.</p> </li> </ul>"},{"location":"#trivy-generates-reports-in-various-formats-facilitating-integration-with-existing-security-tools-and-workflows","title":"Trivy generates reports in various formats, facilitating integration with existing security tools and workflows.","text":""},{"location":"How-To-Use/","title":"Modifying app.R and install_dependencies.R for Docker Deployment","text":"<p>This documentation outlines the steps to modify the <code>app.R</code> and <code>install_dependencies.R</code> files in an R Shiny application and how to ensure that Docker reflects these changes.</p>"},{"location":"How-To-Use/#tldr","title":"TLDR","text":"<p>Modifying the <code>app.R</code> and <code>install_dependencies.R</code> files allows you to customize the behavior and appearance of your R Shiny application. By following the steps outlined in this documentation, you can make changes to these files and ensure that Docker reflects these modifications when running the containerized application.</p>"},{"location":"How-To-Use/#getting-started-modifying-appr","title":"Getting Started - Modifying app.R","text":"<p>The <code>app.R</code> file typically contains the main code for your R Shiny application. You can make changes to this file to update the UI layout, add new visualizations, or modify the server logic.</p>"},{"location":"How-To-Use/#steps-to-modify-appr","title":"Steps to Modify app.R:","text":""},{"location":"How-To-Use/#step-1-open-appr","title":"Step 1 : Open app.R","text":"<p>Locate the <code>app.R</code> file in your project directory and open it in a text editor or an R development environment.</p>"},{"location":"How-To-Use/#step-2-make-changes","title":"Step 2 : Make Changes","text":"<p>Modify the code according to your requirements. You can add new UI elements using Shiny functions like <code>sliderInput</code>, <code>selectInput</code>, <code>plotOutput</code>, etc. You can also update the server logic to handle new input elements or generate different outputs.</p> <ol> <li>Save Changes: Once you've made the necessary modifications, save the <code>app.R</code> file.</li> </ol>"},{"location":"How-To-Use/#modifying-install_dependenciesr","title":"Modifying install_dependencies.R","text":"<p>The <code>install_dependencies.R</code> file contains the dependencies required by your R Shiny application. These dependencies may include R packages that are necessary for the application to function correctly.</p>"},{"location":"How-To-Use/#steps-to-modify-install_dependenciesr","title":"Steps to Modify install_dependencies.R:","text":"<ol> <li> <p>Open install_dependencies.R: Locate the <code>install_dependencies.R</code> file in your project directory and open it in a text editor or an R development environment.</p> </li> <li> <p>Update Dependencies: Add, remove, or update the R package dependencies listed in the file. You can use the <code>install.packages</code> function to install new packages or update existing ones.</p> </li> <li> <p>Save Changes: Once you've updated the dependencies, save the <code>install_dependencies.R</code> file.</p> </li> </ol>"},{"location":"How-To-Use/#dockerizing-changes","title":"Dockerizing Changes","text":"<p>After making modifications to the <code>app.R</code> and <code>install_dependencies.R</code> files, you'll need to ensure that Docker reflects these changes when running the containerized application.</p>"},{"location":"How-To-Use/#steps-to-update-docker-configuration","title":"Steps to Update Docker Configuration:","text":"<ol> <li>Update Docker Compose: Navigate to the root directory of your project that contains the <code>docker-compose.yml</code> file. Run the following command to bring down existing containers and then bring them up again:</li> </ol> <pre><code>docker-compose down &amp;&amp; docker-compose up -d\n</code></pre> <p>This command will stop any running containers and then start them again with the updated configurations.</p> <ol> <li>View Changes: Access your R Shiny application through a web browser using the specified host port. You should see the modifications reflected in the application.</li> </ol>"},{"location":"How-to-adopt-template/","title":"Legacy Project Migration Guide: Adopting Docker, Trivy, and R Shiny Structure","text":"<p>Welcome to the migration guide for bringing your legacy project into the structured environment of Docker, Trivy, and R Shiny. This guide will walk you through the steps necessary to integrate your existing project into this new environment, ensuring ease of deployment, security scanning, and running your application with R Shiny.</p>"},{"location":"How-to-adopt-template/#overview","title":"Overview","text":"<p>This migration aims to modernize your project by introducing Docker for containerization and Trivy for security scanning. By adopting this structure, you'll benefit from improved deployment consistency and enhanced security.</p>"},{"location":"How-to-adopt-template/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the migration, ensure that you have the following prerequisites:</p> <ul> <li>Basic knowledge of Docker, Docker Compose, and Trivy.</li> <li>Familiarity with R Shiny applications.</li> <li>Read the How-To-Use documentation.</li> <li>Downloaded the required applications from the ReadMe file.</li> </ul>"},{"location":"How-to-adopt-template/#migration-steps","title":"Migration Steps","text":""},{"location":"How-to-adopt-template/#step-1-project-structure-adjustment","title":"Step 1 : Project Structure Adjustment","text":"<p>Ensure your project structure aligns with the expected structure for Docker, Trivy, and R Shiny:</p> <ul> <li> <p>app.R: This file will contain your R Shiny application code. Place your existing product code within this file.</p> </li> <li> <p>install_dependancies.R: This file should list all the dependencies required for your application to run. Fill out this file with the necessary R packages and any system-level dependencies.</p> </li> </ul> <p>Ensure that <code>app.R</code> and <code>install_dependancies.R</code> are properly filled out before proceeding to the next step.</p>"},{"location":"How-to-adopt-template/#step-2-docker-compose","title":"Step 2 : Docker Compose","text":"<p>Run the following command to build the image and run the app.R file on localhost:3838:</p> <pre><code>docker compose up -d\n</code></pre> <p>Ensure everything is correct before pushing the project to GitHub.</p>"},{"location":"How-to-adopt-template/#step-3-push-to-github","title":"Step 3 : Push to GitHub","text":"<p>Once you are satisfied with your local setup, push the project to GitHub. This will trigger the workflow to build your Docker image and run Trivy scans. If any high or critical vulnerabilities are found, the workflow will fail, preventing the changes from being pushed to GitHub until the issues are addressed.</p> <p>Trivy will automatically run a scan on the image once it is pushed to GitHub.</p>"},{"location":"How-to-run-trivy-locally/","title":"How to Run Trivy with Act","text":""},{"location":"How-to-run-trivy-locally/#installing-act","title":"Installing Act","text":"<p>Act is a command-line tool that allows you to run GitHub Actions locally. This can be useful for testing your GitHub Actions workflows before pushing changes to GitHub. Here's how to install Act:</p>"},{"location":"How-to-run-trivy-locally/#using-homebrew-macos","title":"Using Homebrew (macOS)","text":"<p>If you're on macOS and have Homebrew installed, you can install Act using the following command: <pre><code>brew install act\n</code></pre></p>"},{"location":"How-to-run-trivy-locally/#using-chocolatey-windows","title":"Using Chocolatey (Windows)","text":"<p>If you're on Windows and have Chocolatey installed, you can install Act using the following command: <pre><code>choco install act-cli\n</code></pre></p>"},{"location":"How-to-run-trivy-locally/#using-go-cross-platform","title":"Using Go (Cross-platform)","text":"<p>Alternatively, you can install Act using Go: <pre><code>go install github.com/nektos/act@latest\n</code></pre></p>"},{"location":"How-to-run-trivy-locally/#what-act-does","title":"What Act Does","text":"<p>Act allows you to run GitHub Actions workflows locally, simulating the execution environment and providing feedback on how your workflows will behave in a GitHub Actions environment. This can help you catch potential issues and debug your workflows before pushing changes to GitHub.</p>"},{"location":"How-to-run-trivy-locally/#running-trivy-with-act","title":"Running Trivy with Act","text":"<p>Assuming you have a GitHub Actions workflow that includes a Trivy scan step, you can use Act to run the Trivy scan locally. Here's how:</p> <ol> <li> <p>Navigate to the directory containing your GitHub Actions workflow files.</p> </li> <li> <p>Open a terminal window.</p> </li> <li> <p>From the root directory of your project, run the following command to execute the GitHub Actions workflow locally:</p> </li> </ol> <pre><code>act \n</code></pre> <ol> <li> <p>Act will output the progress of the job, including any log messages or errors encountered during execution.</p> </li> <li> <p>Once the job completes, you can review the output to identify any vulnerabilities detected by Trivy.</p> </li> </ol> <p>By using Act to run the Trivy scan locally, you can verify the behavior of your Trivy scan job and ensure that it functions as expected before pushing changes to GitHub.</p> <p>For items where there is currently no solution, see the .trivyignore file. It contains an explanation of why the vulnerability has been ignored and the date when it was last updated. It is advised to review these items periodically to check if the vulnerabilities have been addressed.</p>"},{"location":"How-to-update-pages/","title":"Adding Additional Pages to github pages","text":""},{"location":"How-to-update-pages/#tldr","title":"TLDR","text":"<p>This guide breaks down the process of adding pages to the github site into steps, making it easy for someone new to MkDocs to understand how to add more pages to their documentation site.</p> <p>to run locally, use the command :  <pre><code>mkdocs serve \n</code></pre></p>"},{"location":"How-to-update-pages/#getting-started","title":"Getting Started","text":"<p>If you want to add more pages to your MkDocs documentation, you can do so by updating the <code>mkdocs.yml</code> configuration file. Here's a simple guide to help you through the process:</p>"},{"location":"How-to-update-pages/#before-you-begin-be-sure-to-have-the-following-installed","title":"Before you begin, be sure to have the following installed :","text":"<p>mkdocs</p>"},{"location":"How-to-update-pages/#step-1-open-mkdocsyml","title":"Step 1: Open <code>mkdocs.yml</code>","text":"<p>First, locate and open the <code>mkdocs.yml</code> file in your MkDocs project directory. This file contains the configuration settings for your documentation site.</p>"},{"location":"How-to-update-pages/#step-2-navigate-to-the-nav-section","title":"Step 2: Navigate to the <code>nav</code> Section","text":"<p>In the <code>mkdocs.yml</code> file, find the <code>nav</code> section. This section defines the navigation structure of your documentation site.</p>"},{"location":"How-to-update-pages/#step-3-add-a-new-page","title":"Step 3: Add a New Page","text":"<p>To add a new page, you'll need to specify its title and the filename of the Markdown file associated with it. Follow this format:</p> <p><pre><code>nav:\n  - Home: index.md\n  - About: about.md     # Add a new page titled \"About\" linked to about.md\n  - Contact: contact.md # Add another page titled \"Contact\" linked to contact.md\n</code></pre> You can replace \"About\" and \"Contact\" with your desired page titles, and about.md and contact.md with the filenames of your Markdown files.</p>"},{"location":"How-to-update-pages/#step-4-save-changes","title":"Step 4: Save Changes","text":"<p>Once you've added the new pages to the nav section, save the mkdocs.yml file.</p>"},{"location":"How-to-update-pages/#step-5-create-markdown-files","title":"Step 5: Create Markdown Files","text":"<p>Finally, create Markdown files for each new page you've added. For example, create about.md and contact.md in the docs/ directory of your project.</p>"},{"location":"How-to-update-pages/#step-6-edit-new-pages","title":"Step 6: Edit New Pages","text":"<p>You can now edit the content of the new Markdown files you've created to add your desired content for the \"About\" and \"Contact\" pages.</p>"},{"location":"How-to-update-pages/#step-7-run-mkdocs","title":"Step 7: Run MkDocs","text":"<p>After adding and editing the necessary files, run MkDocs to see the changes:</p> <pre><code>mkdocs serve\n</code></pre> <p>This command starts a local server where you can preview your documentation site, including the new pages you've added.</p>"},{"location":"TechStackChoices/","title":"Selection of Docker and Trivy as Tech Stack","text":""},{"location":"TechStackChoices/#tldr","title":"TLDR","text":"<p>The selection of Docker as our containerization platform and Trivy as our container vulnerability scanner is driven by their robust features, reliability, and community support. By leveraging Docker and Trivy in our tech stack, we aim to streamline the development and deployment process while ensuring the security and integrity of our containerized applications.</p>"},{"location":"TechStackChoices/#introduction","title":"Introduction","text":"<p>In our project, we have carefully evaluated various technologies for containerization and container security. After thorough consideration, we have chosen Docker as our containerization platform and Trivy as our container vulnerability scanner. This document outlines the reasons behind our selection of Docker and Trivy as our tech stack.</p>"},{"location":"TechStackChoices/#docker","title":"Docker","text":""},{"location":"TechStackChoices/#reasons-for-choosing-docker","title":"Reasons for Choosing Docker:","text":"<ol> <li> <p>Standardization: Docker provides a standardized way to package, distribute, and run applications within containers. This standardization simplifies the development and deployment process, ensuring consistency across different environments.</p> </li> <li> <p>Portability: Docker containers are portable and can run on any machine that has Docker installed, regardless of the underlying operating system or infrastructure. This portability makes it easier to deploy applications across different environments, from development to production.</p> </li> <li> <p>Resource Efficiency: Docker containers share the host system's kernel, which makes them lightweight and resource-efficient compared to virtual machines. This efficiency allows for better utilization of hardware resources and scalability of applications.</p> </li> <li> <p>Ecosystem: Docker has a vibrant ecosystem with a wide range of tools, libraries, and community support. This ecosystem provides solutions for various aspects of the development and deployment lifecycle, including orchestration, monitoring, and security.</p> </li> </ol>"},{"location":"TechStackChoices/#trivy","title":"Trivy","text":""},{"location":"TechStackChoices/#reasons-for-choosing-trivy","title":"Reasons for Choosing Trivy:","text":"<ol> <li> <p>Comprehensive Vulnerability Database: Trivy leverages multiple vulnerability databases, including CVE, Red Hat, and Debian, to provide comprehensive coverage of security vulnerabilities. This extensive database ensures that our containerized applications are thoroughly scanned for vulnerabilities.</p> </li> <li> <p>Fast Scanning: Trivy is optimized for speed, allowing it to quickly scan container images and provide results in a matter of seconds. This fast scanning capability enables us to integrate security checks seamlessly into our development and deployment pipelines without causing significant overhead.</p> </li> <li> <p>Integration with CI/CD Pipelines: Trivy can be easily integrated into continuous integration and continuous delivery (CI/CD) pipelines to automate security scanning of container images during the development process. This integration ensures that security is considered from the early stages of development and is part of our DevSecOps practices.</p> </li> <li> <p>Simple Usage: Trivy can be run as a standalone tool or integrated into other container scanning workflows, making it easy to incorporate security checks into existing development workflows. Its simple command-line interface and flexible configuration options make it accessible to developers and security teams alike.</p> </li> </ol>"},{"location":"Trivy_ignored_files/","title":"List of ignored files","text":""},{"location":"Trivy_ignored_files/#updated-april-16th-2024","title":"Updated: April 16th, 2024","text":"<p>The decision to ignore CVE-2024-26597 in the vulnerability scan is primarily influenced by the dependency on the <code>rocker/r-ver</code> base image. The vulnerability is related to the Linux kernel and is likely to be resolved through an update of the <code>rocker/r-ver</code> image to a version that addresses CVE-2024-26597. Until such an update is made available and incorporated into the project's Dockerfile, the vulnerability remains unresolved. Therefore, ignoring CVE-2024-26597 temporarily allows the development team to prioritize updating the <code>rocker/r-ver</code> base image to a version that mitigates the vulnerability. Once the base image is updated, the ignore directive can be removed, ensuring a more comprehensive approach to addressing security vulnerabilities within the application environment. Regular maintenance and updates of base images are essential practices to maintain the security posture of containerized applications.</p>"},{"location":"techstack/Docker/","title":"Docker","text":"<p>The Open Container Initiative (OCI) standard (see Open Container Initiative - Open Container Initiative (opencontainers.org)). There's a surprisingly long history to the concept of containerization. </p>"},{"location":"techstack/Docker/#history","title":"History","text":"<p>Docker was the first implementation that was feasible for the average developer to adopt quickly, hence why containerization exploded in the mid 2010s. However, since then, quite a few players have entered the market. Surprisingly, Docker isn't even on the list of CNCF graduated container runtime environments! See CNCF Landscape (the \"Container Runtime\" section). The reason devs still almost universally use Docker, though, is that Docker (like all other container runtimes) implements the OCI specification, making docker images interoperable across container runtimes.</p>"}]}